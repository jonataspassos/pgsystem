# Generated by Django 2.2.4 on 2019-08-30 11:26

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Proposition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PROPOSITION_TYPE', models.CharField(choices=[('INT', 'Integer Number'), ('TXT', 'Text'), ('FLT', 'Float Number'), ('BOL', 'Boolean'), ('GRP', 'Group')], default='GEN', max_length=3)),
                ('desc', models.CharField(blank=True, max_length=30, null=True, verbose_name='Description')),
                ('create', models.DateField(auto_now=True)),
                ('value', models.PositiveIntegerField(default=1, verbose_name='Value')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('QUESTION_TYPE', models.CharField(choices=[('CHO', 'Multiple Choice'), ('TOF', 'True or False'), ('OPN', 'Open'), ('SUM', 'Summation'), ('PRO', 'Multiple Propositions'), ('GRP', 'Group')], default='GEN', max_length=3)),
                ('statement', models.TextField(default='')),
                ('value', models.FloatField(default=1.0, verbose_name='Value')),
            ],
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=30)),
                ('desc', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('create', models.DateField(auto_now=True, verbose_name='Creation')),
                ('aplicate', models.DateField(blank=True, null=True, verbose_name='Aplication')),
                ('questions', models.ManyToManyField(related_name='questions_of_test', to='tournament.Question')),
            ],
        ),
        migrations.CreateModel(
            name='BooleanProposition',
            fields=[
                ('proposition_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournament.Proposition')),
                ('proposition_field', models.NullBooleanField(verbose_name='Yes or No')),
            ],
            bases=('tournament.proposition',),
        ),
        migrations.CreateModel(
            name='FloatProposition',
            fields=[
                ('proposition_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournament.Proposition')),
                ('proposition_field', models.FloatField(default=0.0, verbose_name='Number')),
            ],
            bases=('tournament.proposition',),
        ),
        migrations.CreateModel(
            name='GroupProposition',
            fields=[
                ('proposition_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournament.Proposition')),
                ('proposition_field', models.ManyToManyField(related_name='group_propositions', to='tournament.Proposition')),
            ],
            bases=('tournament.proposition',),
        ),
        migrations.CreateModel(
            name='IntegerProposition',
            fields=[
                ('proposition_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournament.Proposition')),
                ('proposition_field', models.PositiveIntegerField(default=0, verbose_name='Number')),
            ],
            bases=('tournament.proposition',),
        ),
        migrations.CreateModel(
            name='TextProposition',
            fields=[
                ('proposition_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournament.Proposition')),
                ('proposition_field', models.TextField(default='', verbose_name='Text')),
            ],
            bases=('tournament.proposition',),
        ),
        migrations.CreateModel(
            name='UserResponse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.Question')),
                ('response', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tournament.Proposition')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='Name')),
                ('thema', models.CharField(default='', max_length=30, verbose_name='Thema')),
                ('create', models.DateField(auto_now=True)),
                ('end', models.DateField(blank=True, null=True, verbose_name='End')),
                ('tests', models.ManyToManyField(related_name='tests_of_tournament', to='tournament.Test')),
            ],
        ),
        migrations.CreateModel(
            name='TrueOrFalseQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournament.Question')),
                ('answer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='true_or_false_answer', to='tournament.BooleanProposition')),
                ('proposition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='true_or_false_proposition', to='tournament.Proposition')),
            ],
            bases=('tournament.question',),
        ),
        migrations.CreateModel(
            name='SumTypeQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournament.Question')),
                ('alternative', models.ManyToManyField(related_name='sum_type_alternative', to='tournament.Proposition')),
                ('answer', models.ManyToManyField(related_name='sum_type_answer', to='tournament.Proposition')),
            ],
            bases=('tournament.question',),
        ),
        migrations.CreateModel(
            name='OpenQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournament.Question')),
                ('answer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='open_question_answer', to='tournament.Proposition')),
            ],
            bases=('tournament.question',),
        ),
        migrations.CreateModel(
            name='MultipleChoiceQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournament.Question')),
                ('alternative', models.ManyToManyField(related_name='multiple_choice_alternative', to='tournament.Proposition')),
                ('answer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='multiple_choice_answer', to='tournament.Proposition')),
            ],
            bases=('tournament.question',),
        ),
        migrations.CreateModel(
            name='ManyPropositionQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournament.Question')),
                ('alternative', models.ManyToManyField(related_name='many_proposition_alternative', to='tournament.GroupProposition')),
                ('answer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='many_proposition_answer', to='tournament.GroupProposition')),
                ('proposition', models.ManyToManyField(related_name='many_proposition_proposition', to='tournament.Proposition')),
            ],
            bases=('tournament.question',),
        ),
        migrations.CreateModel(
            name='GroupQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournament.Question')),
                ('questions', models.ManyToManyField(related_name='group_questions', to='tournament.Question')),
            ],
            bases=('tournament.question',),
        ),
    ]
